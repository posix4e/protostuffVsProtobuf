// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package test;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import java.nio.ByteBuffer;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class SubSubGroup implements Externalizable, Message<SubSubGroup>, Schema<SubSubGroup>
{

    public static Schema<SubSubGroup> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static SubSubGroup getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final SubSubGroup DEFAULT_INSTANCE = new SubSubGroup();

    
    private int testIntA;
    private int testIntB;

    public SubSubGroup() {
    }

    public SubSubGroup(
       int testIntA,
       int testIntB
    ) {
       this.testIntA = testIntA;
       this.testIntB = testIntB;
    }

    @Override
    public String toString() {
        return "SubSubGroup{" +
                    "testIntA=" + testIntA +
                    ", testIntB=" + testIntB +
                '}';
    }
    // getters and setters

    // testIntA

    public int getTestIntA()
    {
        return testIntA;
    }


    // testIntB

    public int getTestIntB()
    {
        return testIntB;
    }


    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<SubSubGroup> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public SubSubGroup newMessage()
    {
        return new SubSubGroup();
    }

    public Class<SubSubGroup> typeClass()
    {
        return SubSubGroup.class;
    }

    public String messageName()
    {
        return SubSubGroup.class.getSimpleName();
    }

    public String messageFullName()
    {
        return SubSubGroup.class.getName();
    }

    public boolean isInitialized(SubSubGroup message)
    {
        return true;
    }

    public void mergeFrom(Input input, SubSubGroup message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.testIntA = input.readInt32();
                    break;
                case 2:
                    message.testIntB = input.readInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, SubSubGroup message) throws IOException
    {
        output.writeInt32(1, message.testIntA, false);


        output.writeInt32(2, message.testIntB, false);

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "testIntA";
            case 2: return "testIntB";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("testIntA", 1);
        __fieldMap.put("testIntB", 2);
    }
    
}
